/*
 * Generated by gdbus-codegen 2.47.1. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __UM_REALM_GENERATED_H__
#define __UM_REALM_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.realmd.Provider */

#define UM_REALM_TYPE_PROVIDER (um_realm_provider_get_type ())
#define UM_REALM_PROVIDER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UM_REALM_TYPE_PROVIDER, UmRealmProvider))
#define UM_REALM_IS_PROVIDER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UM_REALM_TYPE_PROVIDER))
#define UM_REALM_PROVIDER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), UM_REALM_TYPE_PROVIDER, UmRealmProviderIface))

struct _UmRealmProvider;
typedef struct _UmRealmProvider UmRealmProvider;
typedef struct _UmRealmProviderIface UmRealmProviderIface;

struct _UmRealmProviderIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_discover) (
    UmRealmProvider *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_string,
    GVariant *arg_options);

  const gchar * (*get_name) (UmRealmProvider *object);

  const gchar *const * (*get_realms) (UmRealmProvider *object);

  const gchar * (*get_version) (UmRealmProvider *object);

};

GType um_realm_provider_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *um_realm_provider_interface_info (void);
guint um_realm_provider_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void um_realm_provider_complete_discover (
    UmRealmProvider *object,
    GDBusMethodInvocation *invocation,
    gint relevance,
    const gchar *const *realm);



/* D-Bus method calls: */
void um_realm_provider_call_discover (
    UmRealmProvider *proxy,
    const gchar *arg_string,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean um_realm_provider_call_discover_finish (
    UmRealmProvider *proxy,
    gint *out_relevance,
    gchar ***out_realm,
    GAsyncResult *res,
    GError **error);

gboolean um_realm_provider_call_discover_sync (
    UmRealmProvider *proxy,
    const gchar *arg_string,
    GVariant *arg_options,
    gint *out_relevance,
    gchar ***out_realm,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *um_realm_provider_get_name (UmRealmProvider *object);
gchar *um_realm_provider_dup_name (UmRealmProvider *object);
void um_realm_provider_set_name (UmRealmProvider *object, const gchar *value);

const gchar *um_realm_provider_get_version (UmRealmProvider *object);
gchar *um_realm_provider_dup_version (UmRealmProvider *object);
void um_realm_provider_set_version (UmRealmProvider *object, const gchar *value);

const gchar *const *um_realm_provider_get_realms (UmRealmProvider *object);
gchar **um_realm_provider_dup_realms (UmRealmProvider *object);
void um_realm_provider_set_realms (UmRealmProvider *object, const gchar *const *value);


/* ---- */

#define UM_REALM_TYPE_PROVIDER_PROXY (um_realm_provider_proxy_get_type ())
#define UM_REALM_PROVIDER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UM_REALM_TYPE_PROVIDER_PROXY, UmRealmProviderProxy))
#define UM_REALM_PROVIDER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), UM_REALM_TYPE_PROVIDER_PROXY, UmRealmProviderProxyClass))
#define UM_REALM_PROVIDER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), UM_REALM_TYPE_PROVIDER_PROXY, UmRealmProviderProxyClass))
#define UM_REALM_IS_PROVIDER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UM_REALM_TYPE_PROVIDER_PROXY))
#define UM_REALM_IS_PROVIDER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), UM_REALM_TYPE_PROVIDER_PROXY))

typedef struct _UmRealmProviderProxy UmRealmProviderProxy;
typedef struct _UmRealmProviderProxyClass UmRealmProviderProxyClass;
typedef struct _UmRealmProviderProxyPrivate UmRealmProviderProxyPrivate;

struct _UmRealmProviderProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  UmRealmProviderProxyPrivate *priv;
};

struct _UmRealmProviderProxyClass
{
  GDBusProxyClass parent_class;
};

GType um_realm_provider_proxy_get_type (void) G_GNUC_CONST;

void um_realm_provider_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
UmRealmProvider *um_realm_provider_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
UmRealmProvider *um_realm_provider_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void um_realm_provider_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
UmRealmProvider *um_realm_provider_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
UmRealmProvider *um_realm_provider_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define UM_REALM_TYPE_PROVIDER_SKELETON (um_realm_provider_skeleton_get_type ())
#define UM_REALM_PROVIDER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UM_REALM_TYPE_PROVIDER_SKELETON, UmRealmProviderSkeleton))
#define UM_REALM_PROVIDER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), UM_REALM_TYPE_PROVIDER_SKELETON, UmRealmProviderSkeletonClass))
#define UM_REALM_PROVIDER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), UM_REALM_TYPE_PROVIDER_SKELETON, UmRealmProviderSkeletonClass))
#define UM_REALM_IS_PROVIDER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UM_REALM_TYPE_PROVIDER_SKELETON))
#define UM_REALM_IS_PROVIDER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), UM_REALM_TYPE_PROVIDER_SKELETON))

typedef struct _UmRealmProviderSkeleton UmRealmProviderSkeleton;
typedef struct _UmRealmProviderSkeletonClass UmRealmProviderSkeletonClass;
typedef struct _UmRealmProviderSkeletonPrivate UmRealmProviderSkeletonPrivate;

struct _UmRealmProviderSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  UmRealmProviderSkeletonPrivate *priv;
};

struct _UmRealmProviderSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType um_realm_provider_skeleton_get_type (void) G_GNUC_CONST;

UmRealmProvider *um_realm_provider_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.realmd.Service */

#define UM_REALM_TYPE_SERVICE (um_realm_service_get_type ())
#define UM_REALM_SERVICE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UM_REALM_TYPE_SERVICE, UmRealmService))
#define UM_REALM_IS_SERVICE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UM_REALM_TYPE_SERVICE))
#define UM_REALM_SERVICE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), UM_REALM_TYPE_SERVICE, UmRealmServiceIface))

struct _UmRealmService;
typedef struct _UmRealmService UmRealmService;
typedef struct _UmRealmServiceIface UmRealmServiceIface;

struct _UmRealmServiceIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_cancel) (
    UmRealmService *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_operation);

  gboolean (*handle_release) (
    UmRealmService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_locale) (
    UmRealmService *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_locale);

  void (*diagnostics) (
    UmRealmService *object,
    const gchar *arg_data,
    const gchar *arg_operation);

};

GType um_realm_service_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *um_realm_service_interface_info (void);
guint um_realm_service_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void um_realm_service_complete_cancel (
    UmRealmService *object,
    GDBusMethodInvocation *invocation);

void um_realm_service_complete_set_locale (
    UmRealmService *object,
    GDBusMethodInvocation *invocation);

void um_realm_service_complete_release (
    UmRealmService *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void um_realm_service_emit_diagnostics (
    UmRealmService *object,
    const gchar *arg_data,
    const gchar *arg_operation);



/* D-Bus method calls: */
void um_realm_service_call_cancel (
    UmRealmService *proxy,
    const gchar *arg_operation,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean um_realm_service_call_cancel_finish (
    UmRealmService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean um_realm_service_call_cancel_sync (
    UmRealmService *proxy,
    const gchar *arg_operation,
    GCancellable *cancellable,
    GError **error);

void um_realm_service_call_set_locale (
    UmRealmService *proxy,
    const gchar *arg_locale,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean um_realm_service_call_set_locale_finish (
    UmRealmService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean um_realm_service_call_set_locale_sync (
    UmRealmService *proxy,
    const gchar *arg_locale,
    GCancellable *cancellable,
    GError **error);

void um_realm_service_call_release (
    UmRealmService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean um_realm_service_call_release_finish (
    UmRealmService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean um_realm_service_call_release_sync (
    UmRealmService *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define UM_REALM_TYPE_SERVICE_PROXY (um_realm_service_proxy_get_type ())
#define UM_REALM_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UM_REALM_TYPE_SERVICE_PROXY, UmRealmServiceProxy))
#define UM_REALM_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), UM_REALM_TYPE_SERVICE_PROXY, UmRealmServiceProxyClass))
#define UM_REALM_SERVICE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), UM_REALM_TYPE_SERVICE_PROXY, UmRealmServiceProxyClass))
#define UM_REALM_IS_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UM_REALM_TYPE_SERVICE_PROXY))
#define UM_REALM_IS_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), UM_REALM_TYPE_SERVICE_PROXY))

typedef struct _UmRealmServiceProxy UmRealmServiceProxy;
typedef struct _UmRealmServiceProxyClass UmRealmServiceProxyClass;
typedef struct _UmRealmServiceProxyPrivate UmRealmServiceProxyPrivate;

struct _UmRealmServiceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  UmRealmServiceProxyPrivate *priv;
};

struct _UmRealmServiceProxyClass
{
  GDBusProxyClass parent_class;
};

GType um_realm_service_proxy_get_type (void) G_GNUC_CONST;

void um_realm_service_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
UmRealmService *um_realm_service_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
UmRealmService *um_realm_service_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void um_realm_service_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
UmRealmService *um_realm_service_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
UmRealmService *um_realm_service_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define UM_REALM_TYPE_SERVICE_SKELETON (um_realm_service_skeleton_get_type ())
#define UM_REALM_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UM_REALM_TYPE_SERVICE_SKELETON, UmRealmServiceSkeleton))
#define UM_REALM_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), UM_REALM_TYPE_SERVICE_SKELETON, UmRealmServiceSkeletonClass))
#define UM_REALM_SERVICE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), UM_REALM_TYPE_SERVICE_SKELETON, UmRealmServiceSkeletonClass))
#define UM_REALM_IS_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UM_REALM_TYPE_SERVICE_SKELETON))
#define UM_REALM_IS_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), UM_REALM_TYPE_SERVICE_SKELETON))

typedef struct _UmRealmServiceSkeleton UmRealmServiceSkeleton;
typedef struct _UmRealmServiceSkeletonClass UmRealmServiceSkeletonClass;
typedef struct _UmRealmServiceSkeletonPrivate UmRealmServiceSkeletonPrivate;

struct _UmRealmServiceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  UmRealmServiceSkeletonPrivate *priv;
};

struct _UmRealmServiceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType um_realm_service_skeleton_get_type (void) G_GNUC_CONST;

UmRealmService *um_realm_service_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.realmd.Realm */

#define UM_REALM_TYPE_COMMON (um_realm_common_get_type ())
#define UM_REALM_COMMON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UM_REALM_TYPE_COMMON, UmRealmCommon))
#define UM_REALM_IS_COMMON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UM_REALM_TYPE_COMMON))
#define UM_REALM_COMMON_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), UM_REALM_TYPE_COMMON, UmRealmCommonIface))

struct _UmRealmCommon;
typedef struct _UmRealmCommon UmRealmCommon;
typedef struct _UmRealmCommonIface UmRealmCommonIface;

struct _UmRealmCommonIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_change_login_policy) (
    UmRealmCommon *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_login_policy,
    const gchar *const *arg_permitted_add,
    const gchar *const *arg_permitted_remove,
    GVariant *arg_options);

  gboolean (*handle_deconfigure) (
    UmRealmCommon *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_options);

  const gchar * (*get_configured) (UmRealmCommon *object);

  GVariant * (*get_details) (UmRealmCommon *object);

  const gchar *const * (*get_login_formats) (UmRealmCommon *object);

  const gchar * (*get_login_policy) (UmRealmCommon *object);

  const gchar * (*get_name) (UmRealmCommon *object);

  const gchar *const * (*get_permitted_logins) (UmRealmCommon *object);

  const gchar *const * (*get_supported_interfaces) (UmRealmCommon *object);

};

GType um_realm_common_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *um_realm_common_interface_info (void);
guint um_realm_common_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void um_realm_common_complete_deconfigure (
    UmRealmCommon *object,
    GDBusMethodInvocation *invocation);

void um_realm_common_complete_change_login_policy (
    UmRealmCommon *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void um_realm_common_call_deconfigure (
    UmRealmCommon *proxy,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean um_realm_common_call_deconfigure_finish (
    UmRealmCommon *proxy,
    GAsyncResult *res,
    GError **error);

gboolean um_realm_common_call_deconfigure_sync (
    UmRealmCommon *proxy,
    GVariant *arg_options,
    GCancellable *cancellable,
    GError **error);

void um_realm_common_call_change_login_policy (
    UmRealmCommon *proxy,
    const gchar *arg_login_policy,
    const gchar *const *arg_permitted_add,
    const gchar *const *arg_permitted_remove,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean um_realm_common_call_change_login_policy_finish (
    UmRealmCommon *proxy,
    GAsyncResult *res,
    GError **error);

gboolean um_realm_common_call_change_login_policy_sync (
    UmRealmCommon *proxy,
    const gchar *arg_login_policy,
    const gchar *const *arg_permitted_add,
    const gchar *const *arg_permitted_remove,
    GVariant *arg_options,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *um_realm_common_get_name (UmRealmCommon *object);
gchar *um_realm_common_dup_name (UmRealmCommon *object);
void um_realm_common_set_name (UmRealmCommon *object, const gchar *value);

const gchar *um_realm_common_get_configured (UmRealmCommon *object);
gchar *um_realm_common_dup_configured (UmRealmCommon *object);
void um_realm_common_set_configured (UmRealmCommon *object, const gchar *value);

const gchar *const *um_realm_common_get_supported_interfaces (UmRealmCommon *object);
gchar **um_realm_common_dup_supported_interfaces (UmRealmCommon *object);
void um_realm_common_set_supported_interfaces (UmRealmCommon *object, const gchar *const *value);

GVariant *um_realm_common_get_details (UmRealmCommon *object);
GVariant *um_realm_common_dup_details (UmRealmCommon *object);
void um_realm_common_set_details (UmRealmCommon *object, GVariant *value);

const gchar *const *um_realm_common_get_login_formats (UmRealmCommon *object);
gchar **um_realm_common_dup_login_formats (UmRealmCommon *object);
void um_realm_common_set_login_formats (UmRealmCommon *object, const gchar *const *value);

const gchar *um_realm_common_get_login_policy (UmRealmCommon *object);
gchar *um_realm_common_dup_login_policy (UmRealmCommon *object);
void um_realm_common_set_login_policy (UmRealmCommon *object, const gchar *value);

const gchar *const *um_realm_common_get_permitted_logins (UmRealmCommon *object);
gchar **um_realm_common_dup_permitted_logins (UmRealmCommon *object);
void um_realm_common_set_permitted_logins (UmRealmCommon *object, const gchar *const *value);


/* ---- */

#define UM_REALM_TYPE_COMMON_PROXY (um_realm_common_proxy_get_type ())
#define UM_REALM_COMMON_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UM_REALM_TYPE_COMMON_PROXY, UmRealmCommonProxy))
#define UM_REALM_COMMON_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), UM_REALM_TYPE_COMMON_PROXY, UmRealmCommonProxyClass))
#define UM_REALM_COMMON_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), UM_REALM_TYPE_COMMON_PROXY, UmRealmCommonProxyClass))
#define UM_REALM_IS_COMMON_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UM_REALM_TYPE_COMMON_PROXY))
#define UM_REALM_IS_COMMON_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), UM_REALM_TYPE_COMMON_PROXY))

typedef struct _UmRealmCommonProxy UmRealmCommonProxy;
typedef struct _UmRealmCommonProxyClass UmRealmCommonProxyClass;
typedef struct _UmRealmCommonProxyPrivate UmRealmCommonProxyPrivate;

struct _UmRealmCommonProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  UmRealmCommonProxyPrivate *priv;
};

struct _UmRealmCommonProxyClass
{
  GDBusProxyClass parent_class;
};

GType um_realm_common_proxy_get_type (void) G_GNUC_CONST;

void um_realm_common_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
UmRealmCommon *um_realm_common_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
UmRealmCommon *um_realm_common_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void um_realm_common_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
UmRealmCommon *um_realm_common_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
UmRealmCommon *um_realm_common_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define UM_REALM_TYPE_COMMON_SKELETON (um_realm_common_skeleton_get_type ())
#define UM_REALM_COMMON_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UM_REALM_TYPE_COMMON_SKELETON, UmRealmCommonSkeleton))
#define UM_REALM_COMMON_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), UM_REALM_TYPE_COMMON_SKELETON, UmRealmCommonSkeletonClass))
#define UM_REALM_COMMON_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), UM_REALM_TYPE_COMMON_SKELETON, UmRealmCommonSkeletonClass))
#define UM_REALM_IS_COMMON_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UM_REALM_TYPE_COMMON_SKELETON))
#define UM_REALM_IS_COMMON_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), UM_REALM_TYPE_COMMON_SKELETON))

typedef struct _UmRealmCommonSkeleton UmRealmCommonSkeleton;
typedef struct _UmRealmCommonSkeletonClass UmRealmCommonSkeletonClass;
typedef struct _UmRealmCommonSkeletonPrivate UmRealmCommonSkeletonPrivate;

struct _UmRealmCommonSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  UmRealmCommonSkeletonPrivate *priv;
};

struct _UmRealmCommonSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType um_realm_common_skeleton_get_type (void) G_GNUC_CONST;

UmRealmCommon *um_realm_common_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.realmd.Kerberos */

#define UM_REALM_TYPE_KERBEROS (um_realm_kerberos_get_type ())
#define UM_REALM_KERBEROS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UM_REALM_TYPE_KERBEROS, UmRealmKerberos))
#define UM_REALM_IS_KERBEROS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UM_REALM_TYPE_KERBEROS))
#define UM_REALM_KERBEROS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), UM_REALM_TYPE_KERBEROS, UmRealmKerberosIface))

struct _UmRealmKerberos;
typedef struct _UmRealmKerberos UmRealmKerberos;
typedef struct _UmRealmKerberosIface UmRealmKerberosIface;

struct _UmRealmKerberosIface
{
  GTypeInterface parent_iface;

  const gchar * (*get_domain_name) (UmRealmKerberos *object);

  const gchar * (*get_realm_name) (UmRealmKerberos *object);

};

GType um_realm_kerberos_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *um_realm_kerberos_interface_info (void);
guint um_realm_kerberos_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
const gchar *um_realm_kerberos_get_realm_name (UmRealmKerberos *object);
gchar *um_realm_kerberos_dup_realm_name (UmRealmKerberos *object);
void um_realm_kerberos_set_realm_name (UmRealmKerberos *object, const gchar *value);

const gchar *um_realm_kerberos_get_domain_name (UmRealmKerberos *object);
gchar *um_realm_kerberos_dup_domain_name (UmRealmKerberos *object);
void um_realm_kerberos_set_domain_name (UmRealmKerberos *object, const gchar *value);


/* ---- */

#define UM_REALM_TYPE_KERBEROS_PROXY (um_realm_kerberos_proxy_get_type ())
#define UM_REALM_KERBEROS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UM_REALM_TYPE_KERBEROS_PROXY, UmRealmKerberosProxy))
#define UM_REALM_KERBEROS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), UM_REALM_TYPE_KERBEROS_PROXY, UmRealmKerberosProxyClass))
#define UM_REALM_KERBEROS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), UM_REALM_TYPE_KERBEROS_PROXY, UmRealmKerberosProxyClass))
#define UM_REALM_IS_KERBEROS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UM_REALM_TYPE_KERBEROS_PROXY))
#define UM_REALM_IS_KERBEROS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), UM_REALM_TYPE_KERBEROS_PROXY))

typedef struct _UmRealmKerberosProxy UmRealmKerberosProxy;
typedef struct _UmRealmKerberosProxyClass UmRealmKerberosProxyClass;
typedef struct _UmRealmKerberosProxyPrivate UmRealmKerberosProxyPrivate;

struct _UmRealmKerberosProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  UmRealmKerberosProxyPrivate *priv;
};

struct _UmRealmKerberosProxyClass
{
  GDBusProxyClass parent_class;
};

GType um_realm_kerberos_proxy_get_type (void) G_GNUC_CONST;

void um_realm_kerberos_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
UmRealmKerberos *um_realm_kerberos_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
UmRealmKerberos *um_realm_kerberos_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void um_realm_kerberos_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
UmRealmKerberos *um_realm_kerberos_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
UmRealmKerberos *um_realm_kerberos_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define UM_REALM_TYPE_KERBEROS_SKELETON (um_realm_kerberos_skeleton_get_type ())
#define UM_REALM_KERBEROS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UM_REALM_TYPE_KERBEROS_SKELETON, UmRealmKerberosSkeleton))
#define UM_REALM_KERBEROS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), UM_REALM_TYPE_KERBEROS_SKELETON, UmRealmKerberosSkeletonClass))
#define UM_REALM_KERBEROS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), UM_REALM_TYPE_KERBEROS_SKELETON, UmRealmKerberosSkeletonClass))
#define UM_REALM_IS_KERBEROS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UM_REALM_TYPE_KERBEROS_SKELETON))
#define UM_REALM_IS_KERBEROS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), UM_REALM_TYPE_KERBEROS_SKELETON))

typedef struct _UmRealmKerberosSkeleton UmRealmKerberosSkeleton;
typedef struct _UmRealmKerberosSkeletonClass UmRealmKerberosSkeletonClass;
typedef struct _UmRealmKerberosSkeletonPrivate UmRealmKerberosSkeletonPrivate;

struct _UmRealmKerberosSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  UmRealmKerberosSkeletonPrivate *priv;
};

struct _UmRealmKerberosSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType um_realm_kerberos_skeleton_get_type (void) G_GNUC_CONST;

UmRealmKerberos *um_realm_kerberos_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.realmd.KerberosMembership */

#define UM_REALM_TYPE_KERBEROS_MEMBERSHIP (um_realm_kerberos_membership_get_type ())
#define UM_REALM_KERBEROS_MEMBERSHIP(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UM_REALM_TYPE_KERBEROS_MEMBERSHIP, UmRealmKerberosMembership))
#define UM_REALM_IS_KERBEROS_MEMBERSHIP(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UM_REALM_TYPE_KERBEROS_MEMBERSHIP))
#define UM_REALM_KERBEROS_MEMBERSHIP_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), UM_REALM_TYPE_KERBEROS_MEMBERSHIP, UmRealmKerberosMembershipIface))

struct _UmRealmKerberosMembership;
typedef struct _UmRealmKerberosMembership UmRealmKerberosMembership;
typedef struct _UmRealmKerberosMembershipIface UmRealmKerberosMembershipIface;

struct _UmRealmKerberosMembershipIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_join) (
    UmRealmKerberosMembership *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_credentials,
    GVariant *arg_options);

  gboolean (*handle_leave) (
    UmRealmKerberosMembership *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_credentials,
    GVariant *arg_options);

  const gchar * (*get_suggested_administrator) (UmRealmKerberosMembership *object);

  GVariant * (*get_supported_join_credentials) (UmRealmKerberosMembership *object);

  GVariant * (*get_supported_leave_credentials) (UmRealmKerberosMembership *object);

};

GType um_realm_kerberos_membership_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *um_realm_kerberos_membership_interface_info (void);
guint um_realm_kerberos_membership_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void um_realm_kerberos_membership_complete_join (
    UmRealmKerberosMembership *object,
    GDBusMethodInvocation *invocation);

void um_realm_kerberos_membership_complete_leave (
    UmRealmKerberosMembership *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void um_realm_kerberos_membership_call_join (
    UmRealmKerberosMembership *proxy,
    GVariant *arg_credentials,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean um_realm_kerberos_membership_call_join_finish (
    UmRealmKerberosMembership *proxy,
    GAsyncResult *res,
    GError **error);

gboolean um_realm_kerberos_membership_call_join_sync (
    UmRealmKerberosMembership *proxy,
    GVariant *arg_credentials,
    GVariant *arg_options,
    GCancellable *cancellable,
    GError **error);

void um_realm_kerberos_membership_call_leave (
    UmRealmKerberosMembership *proxy,
    GVariant *arg_credentials,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean um_realm_kerberos_membership_call_leave_finish (
    UmRealmKerberosMembership *proxy,
    GAsyncResult *res,
    GError **error);

gboolean um_realm_kerberos_membership_call_leave_sync (
    UmRealmKerberosMembership *proxy,
    GVariant *arg_credentials,
    GVariant *arg_options,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *um_realm_kerberos_membership_get_suggested_administrator (UmRealmKerberosMembership *object);
gchar *um_realm_kerberos_membership_dup_suggested_administrator (UmRealmKerberosMembership *object);
void um_realm_kerberos_membership_set_suggested_administrator (UmRealmKerberosMembership *object, const gchar *value);

GVariant *um_realm_kerberos_membership_get_supported_join_credentials (UmRealmKerberosMembership *object);
GVariant *um_realm_kerberos_membership_dup_supported_join_credentials (UmRealmKerberosMembership *object);
void um_realm_kerberos_membership_set_supported_join_credentials (UmRealmKerberosMembership *object, GVariant *value);

GVariant *um_realm_kerberos_membership_get_supported_leave_credentials (UmRealmKerberosMembership *object);
GVariant *um_realm_kerberos_membership_dup_supported_leave_credentials (UmRealmKerberosMembership *object);
void um_realm_kerberos_membership_set_supported_leave_credentials (UmRealmKerberosMembership *object, GVariant *value);


/* ---- */

#define UM_REALM_TYPE_KERBEROS_MEMBERSHIP_PROXY (um_realm_kerberos_membership_proxy_get_type ())
#define UM_REALM_KERBEROS_MEMBERSHIP_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UM_REALM_TYPE_KERBEROS_MEMBERSHIP_PROXY, UmRealmKerberosMembershipProxy))
#define UM_REALM_KERBEROS_MEMBERSHIP_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), UM_REALM_TYPE_KERBEROS_MEMBERSHIP_PROXY, UmRealmKerberosMembershipProxyClass))
#define UM_REALM_KERBEROS_MEMBERSHIP_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), UM_REALM_TYPE_KERBEROS_MEMBERSHIP_PROXY, UmRealmKerberosMembershipProxyClass))
#define UM_REALM_IS_KERBEROS_MEMBERSHIP_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UM_REALM_TYPE_KERBEROS_MEMBERSHIP_PROXY))
#define UM_REALM_IS_KERBEROS_MEMBERSHIP_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), UM_REALM_TYPE_KERBEROS_MEMBERSHIP_PROXY))

typedef struct _UmRealmKerberosMembershipProxy UmRealmKerberosMembershipProxy;
typedef struct _UmRealmKerberosMembershipProxyClass UmRealmKerberosMembershipProxyClass;
typedef struct _UmRealmKerberosMembershipProxyPrivate UmRealmKerberosMembershipProxyPrivate;

struct _UmRealmKerberosMembershipProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  UmRealmKerberosMembershipProxyPrivate *priv;
};

struct _UmRealmKerberosMembershipProxyClass
{
  GDBusProxyClass parent_class;
};

GType um_realm_kerberos_membership_proxy_get_type (void) G_GNUC_CONST;

void um_realm_kerberos_membership_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
UmRealmKerberosMembership *um_realm_kerberos_membership_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
UmRealmKerberosMembership *um_realm_kerberos_membership_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void um_realm_kerberos_membership_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
UmRealmKerberosMembership *um_realm_kerberos_membership_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
UmRealmKerberosMembership *um_realm_kerberos_membership_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define UM_REALM_TYPE_KERBEROS_MEMBERSHIP_SKELETON (um_realm_kerberos_membership_skeleton_get_type ())
#define UM_REALM_KERBEROS_MEMBERSHIP_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UM_REALM_TYPE_KERBEROS_MEMBERSHIP_SKELETON, UmRealmKerberosMembershipSkeleton))
#define UM_REALM_KERBEROS_MEMBERSHIP_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), UM_REALM_TYPE_KERBEROS_MEMBERSHIP_SKELETON, UmRealmKerberosMembershipSkeletonClass))
#define UM_REALM_KERBEROS_MEMBERSHIP_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), UM_REALM_TYPE_KERBEROS_MEMBERSHIP_SKELETON, UmRealmKerberosMembershipSkeletonClass))
#define UM_REALM_IS_KERBEROS_MEMBERSHIP_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UM_REALM_TYPE_KERBEROS_MEMBERSHIP_SKELETON))
#define UM_REALM_IS_KERBEROS_MEMBERSHIP_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), UM_REALM_TYPE_KERBEROS_MEMBERSHIP_SKELETON))

typedef struct _UmRealmKerberosMembershipSkeleton UmRealmKerberosMembershipSkeleton;
typedef struct _UmRealmKerberosMembershipSkeletonClass UmRealmKerberosMembershipSkeletonClass;
typedef struct _UmRealmKerberosMembershipSkeletonPrivate UmRealmKerberosMembershipSkeletonPrivate;

struct _UmRealmKerberosMembershipSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  UmRealmKerberosMembershipSkeletonPrivate *priv;
};

struct _UmRealmKerberosMembershipSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType um_realm_kerberos_membership_skeleton_get_type (void) G_GNUC_CONST;

UmRealmKerberosMembership *um_realm_kerberos_membership_skeleton_new (void);


/* ---- */

#define UM_REALM_TYPE_OBJECT (um_realm_object_get_type ())
#define UM_REALM_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UM_REALM_TYPE_OBJECT, UmRealmObject))
#define UM_REALM_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UM_REALM_TYPE_OBJECT))
#define UM_REALM_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), UM_REALM_TYPE_OBJECT, UmRealmObject))

struct _UmRealmObject;
typedef struct _UmRealmObject UmRealmObject;
typedef struct _UmRealmObjectIface UmRealmObjectIface;

struct _UmRealmObjectIface
{
  GTypeInterface parent_iface;
};

GType um_realm_object_get_type (void) G_GNUC_CONST;

UmRealmProvider *um_realm_object_get_provider (UmRealmObject *object);
UmRealmService *um_realm_object_get_service (UmRealmObject *object);
UmRealmCommon *um_realm_object_get_common (UmRealmObject *object);
UmRealmKerberos *um_realm_object_get_kerberos (UmRealmObject *object);
UmRealmKerberosMembership *um_realm_object_get_kerberos_membership (UmRealmObject *object);
UmRealmProvider *um_realm_object_peek_provider (UmRealmObject *object);
UmRealmService *um_realm_object_peek_service (UmRealmObject *object);
UmRealmCommon *um_realm_object_peek_common (UmRealmObject *object);
UmRealmKerberos *um_realm_object_peek_kerberos (UmRealmObject *object);
UmRealmKerberosMembership *um_realm_object_peek_kerberos_membership (UmRealmObject *object);

#define UM_REALM_TYPE_OBJECT_PROXY (um_realm_object_proxy_get_type ())
#define UM_REALM_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UM_REALM_TYPE_OBJECT_PROXY, UmRealmObjectProxy))
#define UM_REALM_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), UM_REALM_TYPE_OBJECT_PROXY, UmRealmObjectProxyClass))
#define UM_REALM_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), UM_REALM_TYPE_OBJECT_PROXY, UmRealmObjectProxyClass))
#define UM_REALM_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UM_REALM_TYPE_OBJECT_PROXY))
#define UM_REALM_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), UM_REALM_TYPE_OBJECT_PROXY))

typedef struct _UmRealmObjectProxy UmRealmObjectProxy;
typedef struct _UmRealmObjectProxyClass UmRealmObjectProxyClass;
typedef struct _UmRealmObjectProxyPrivate UmRealmObjectProxyPrivate;

struct _UmRealmObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  UmRealmObjectProxyPrivate *priv;
};

struct _UmRealmObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType um_realm_object_proxy_get_type (void) G_GNUC_CONST;
UmRealmObjectProxy *um_realm_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define UM_REALM_TYPE_OBJECT_SKELETON (um_realm_object_skeleton_get_type ())
#define UM_REALM_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UM_REALM_TYPE_OBJECT_SKELETON, UmRealmObjectSkeleton))
#define UM_REALM_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), UM_REALM_TYPE_OBJECT_SKELETON, UmRealmObjectSkeletonClass))
#define UM_REALM_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), UM_REALM_TYPE_OBJECT_SKELETON, UmRealmObjectSkeletonClass))
#define UM_REALM_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UM_REALM_TYPE_OBJECT_SKELETON))
#define UM_REALM_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), UM_REALM_TYPE_OBJECT_SKELETON))

typedef struct _UmRealmObjectSkeleton UmRealmObjectSkeleton;
typedef struct _UmRealmObjectSkeletonClass UmRealmObjectSkeletonClass;
typedef struct _UmRealmObjectSkeletonPrivate UmRealmObjectSkeletonPrivate;

struct _UmRealmObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  UmRealmObjectSkeletonPrivate *priv;
};

struct _UmRealmObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType um_realm_object_skeleton_get_type (void) G_GNUC_CONST;
UmRealmObjectSkeleton *um_realm_object_skeleton_new (const gchar *object_path);
void um_realm_object_skeleton_set_provider (UmRealmObjectSkeleton *object, UmRealmProvider *interface_);
void um_realm_object_skeleton_set_service (UmRealmObjectSkeleton *object, UmRealmService *interface_);
void um_realm_object_skeleton_set_common (UmRealmObjectSkeleton *object, UmRealmCommon *interface_);
void um_realm_object_skeleton_set_kerberos (UmRealmObjectSkeleton *object, UmRealmKerberos *interface_);
void um_realm_object_skeleton_set_kerberos_membership (UmRealmObjectSkeleton *object, UmRealmKerberosMembership *interface_);

/* ---- */

#define UM_REALM_TYPE_OBJECT_MANAGER_CLIENT (um_realm_object_manager_client_get_type ())
#define UM_REALM_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UM_REALM_TYPE_OBJECT_MANAGER_CLIENT, UmRealmObjectManagerClient))
#define UM_REALM_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), UM_REALM_TYPE_OBJECT_MANAGER_CLIENT, UmRealmObjectManagerClientClass))
#define UM_REALM_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), UM_REALM_TYPE_OBJECT_MANAGER_CLIENT, UmRealmObjectManagerClientClass))
#define UM_REALM_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UM_REALM_TYPE_OBJECT_MANAGER_CLIENT))
#define UM_REALM_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), UM_REALM_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _UmRealmObjectManagerClient UmRealmObjectManagerClient;
typedef struct _UmRealmObjectManagerClientClass UmRealmObjectManagerClientClass;
typedef struct _UmRealmObjectManagerClientPrivate UmRealmObjectManagerClientPrivate;

struct _UmRealmObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  UmRealmObjectManagerClientPrivate *priv;
};

struct _UmRealmObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

GType um_realm_object_manager_client_get_type (void) G_GNUC_CONST;

GType um_realm_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void um_realm_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *um_realm_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *um_realm_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void um_realm_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *um_realm_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *um_realm_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __UM_REALM_GENERATED_H__ */
