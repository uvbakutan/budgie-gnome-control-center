From: Tim Lunn <tim@feathertop.org>
Date: Fri, 11 Sep 2015 13:43:40 +1000
Subject: Provide an api for the installation of language packs

This adds cc_common_language_maybe_install() which uses
PackageKit WhatProvides locale() to locate and install
language packs for the selected language
---

Index: gnome-control-center/panels/common/cc-common-language.c
===================================================================
--- gnome-control-center.orig/panels/common/cc-common-language.c
+++ gnome-control-center/panels/common/cc-common-language.c
@@ -425,3 +425,240 @@ cc_common_language_add_user_languages (G
         g_hash_table_destroy (user_langs);
 }
 
+typedef struct {
+        gchar *lang;
+        guint xid;
+        GDBusProxy *pk_proxy, *pk_transaction_proxy;
+        GPtrArray *array;
+} PkTransactionData;
+
+static void
+on_pk_what_provides_ready (GObject      *source,
+                           GAsyncResult *res,
+                           PkTransactionData *pk_data)
+{
+  GError     *error;
+  GVariant   *result;
+
+  error = NULL;
+  result = g_dbus_proxy_call_finish (G_DBUS_PROXY (source), res, &error);
+  if (result == NULL)
+    {
+      g_debug ("Error getting PackageKit updates list: %s", error->message);
+      g_error_free (error);
+      return;
+    }
+}
+
+static void
+cc_common_language_install (guint xid, gchar **packages) {
+
+  GDBusProxy *proxy = NULL;
+  GError *error = NULL;
+  GVariant *retval;
+
+  /* get a session bus proxy */
+  proxy = g_dbus_proxy_new_for_bus_sync (G_BUS_TYPE_SESSION,
+                 G_DBUS_PROXY_FLAGS_NONE, NULL,
+                 "org.freedesktop.PackageKit",
+                 "/org/freedesktop/PackageKit",
+                 "org.freedesktop.PackageKit.Modify",
+                 NULL, &error);
+  if (proxy == NULL) {
+    g_debug ("failed: %s", error->message);
+    g_error_free (error);
+    goto out;
+  }
+
+  /* issue the sync request */
+  retval = g_dbus_proxy_call_sync (proxy,
+                                   "InstallPackageNames",
+                                   g_variant_new ("(u^a&ss)",
+                                      xid,
+                                      packages,
+                                      "hide-finished"),
+                                   G_DBUS_CALL_FLAGS_NONE,
+                                   -1, /* timeout */
+                                   NULL, /* cancellable */
+                                   &error);
+  if (retval == NULL) {
+    g_debug ("failed: %s", error->message);
+    g_error_free (error);
+    goto out;
+  }
+  g_object_unref (retval);
+
+out:
+  if (proxy != NULL)
+    g_object_unref (proxy);
+  return;
+}
+
+static void
+on_pk_transaction_signal (GDBusProxy *proxy,
+                          char *sender_name,
+                          char *signal_name,
+                          GVariant *parameters,
+                          PkTransactionData *pk_data)
+{
+  if (g_strcmp0 (signal_name, "Package") == 0) {
+    gchar *package, *unused;
+    guint32 status;
+    gchar **split;
+
+    g_variant_get (parameters, "(u&s&s)", &status, &package, &unused);
+
+    if (status == 2) { /*PK_INFO_ENUM_AVAILABLE*/
+      split = g_strsplit(package, ";", -1);
+      g_ptr_array_add (pk_data->array, g_strdup (split[0]));
+
+      g_strfreev(split);
+    }
+  } else if (!g_strcmp0 (signal_name, "Finished")) {
+    char **lang;
+
+    g_ptr_array_add (pk_data->array, NULL);
+
+    lang = (char **) g_ptr_array_free (pk_data->array, FALSE);
+    /* Now install all packages returned by the previous call */
+    if (lang[0] != NULL)
+      cc_common_language_install(pk_data->xid, lang);
+
+    g_strfreev(lang);
+
+  } else if (g_strcmp0 (signal_name, "Destroy") == 0) {
+      g_free (pk_data->lang);
+      g_clear_object (&pk_data->pk_transaction_proxy);
+      g_clear_object (&pk_data->pk_proxy);
+  }
+}
+
+static void
+on_pk_get_tid_ready (GObject      *source,
+                     GAsyncResult *res,
+                     PkTransactionData *pk_data)
+
+{
+  GError     *error;
+  GVariant   *result;
+  char       *tid;
+
+  const gchar * provides_args[] = { g_strdup_printf ("locale(%s)",pk_data->lang), NULL };
+  error = NULL;
+  result = g_dbus_proxy_call_finish (G_DBUS_PROXY (source), res, &error);
+  if (result == NULL)
+    {
+      if (g_error_matches (error, G_DBUS_ERROR, G_DBUS_ERROR_SERVICE_UNKNOWN) == FALSE)
+        g_debug ("Error getting PackageKit transaction ID: %s", error->message);
+        g_error_free (error);
+      return;
+    }
+
+  g_variant_get (result, "(o)", &tid);
+
+  pk_data->pk_transaction_proxy = g_dbus_proxy_new_for_bus_sync (G_BUS_TYPE_SYSTEM,
+                                                                 G_DBUS_PROXY_FLAGS_NONE,
+                                                                 NULL,
+                                                                 "org.freedesktop.PackageKit",
+                                                                 tid,
+                                                                 "org.freedesktop.PackageKit.Transaction",
+                                                                 NULL,
+                                                                 NULL);
+  g_free (tid);
+  g_variant_unref (result);
+
+  if (pk_data->pk_transaction_proxy == NULL)
+    {
+      g_debug ("Unable to get PackageKit transaction proxy object");
+      return;
+    }
+
+  g_signal_connect (pk_data->pk_transaction_proxy,
+                    "g-signal",
+                    G_CALLBACK (on_pk_transaction_signal),
+                    pk_data);
+
+  g_dbus_proxy_call (pk_data->pk_transaction_proxy,
+                     "WhatProvides",
+                     /* TODO need to get enums from libpackagekit-glib2 */
+                     g_variant_new ("(tu^a&s)",
+                                    (guint64)1, /*PK_FILTER_ENUM_NONE*/
+                                    (guint32)11, /*PK_PROVIDES_ENUM_LANGUAGE_SUPPORT*/
+                                    provides_args),
+                     G_DBUS_CALL_FLAGS_NONE,
+                     -1,
+                     NULL,
+                     (GAsyncReadyCallback) on_pk_what_provides_ready,
+                     pk_data);
+}
+
+gboolean
+cc_common_language_maybe_install (guint xid, const gchar *lang, gboolean force)
+{
+        gchar *language_code, *territory_code, *territory_lang = NULL;
+        gchar **langs;
+        gboolean result = FALSE;
+        int i;
+        PkTransactionData *pk_data = NULL;
+
+        gnome_parse_locale (lang, &language_code, &territory_code, NULL, NULL);
+
+        /* If the language is already available, do nothing */
+        if (g_strcmp0 (language_code, "zh") == 0 )
+                territory_lang = g_strdup_printf ("%s_%s", language_code, territory_code);
+        else
+                territory_lang = g_strdup (language_code);
+
+        langs = cc_common_language_get_installed_languages();
+        for (i = 0; langs[i]; i++) {
+                if (g_strrstr (langs[i], territory_lang) ) {
+                        if (!force) {
+                               g_warning ("Language is already installed");
+                               result = TRUE;
+                               goto out;
+                        }
+                }
+         }
+
+        g_warning ("Language %s not installed, trying to install it", lang);
+
+        pk_data = g_new0 (PkTransactionData, 1);
+        pk_data->lang = g_strdup (lang);
+        pk_data->array = g_ptr_array_new ();
+        pk_data->xid = xid;
+
+        /* Now try to retrieve the list of packages needed to install this language */
+        pk_data->pk_proxy = g_dbus_proxy_new_for_bus_sync (G_BUS_TYPE_SYSTEM,
+                                                           G_DBUS_PROXY_FLAGS_NONE,
+                                                           NULL,
+                                                           "org.freedesktop.PackageKit",
+                                                           "/org/freedesktop/PackageKit",
+                                                           "org.freedesktop.PackageKit",
+                                                           NULL,
+                                                           NULL);
+        if (pk_data->pk_proxy == NULL) {
+                /* if there's a PK error, ignore and assume the lang is available */
+                g_debug ("PackageKit not available, not installing language");
+                goto out;
+        }
+
+
+
+        /* Retrieve PK transaction */
+        g_dbus_proxy_call  (pk_data->pk_proxy,
+                            "CreateTransaction",
+                            NULL,
+                            G_DBUS_CALL_FLAGS_NONE,
+                            -1,
+                            NULL,
+                            (GAsyncReadyCallback) on_pk_get_tid_ready,
+                            pk_data);
+
+out:
+        g_free (language_code);
+        g_free (territory_code);
+        g_free (territory_lang);
+        g_strfreev (langs);
+
+        return result;
+}
Index: gnome-control-center/panels/common/cc-common-language.h
===================================================================
--- gnome-control-center.orig/panels/common/cc-common-language.h
+++ gnome-control-center/panels/common/cc-common-language.h
@@ -51,6 +51,8 @@ GHashTable *cc_common_language_get_initi
 GHashTable *cc_common_language_get_user_languages      (void);
 GHashTable *cc_common_language_get_initial_regions     (const gchar *lang);
 
+gboolean cc_common_language_maybe_install           (guint32 xid,  const gchar *lang, gboolean force);
+
 void     cc_common_language_setup_list              (GtkWidget    *treeview,
 						     GHashTable   *users,
 						     GHashTable   *initial);
